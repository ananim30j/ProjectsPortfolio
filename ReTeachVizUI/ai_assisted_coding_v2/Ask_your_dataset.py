# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/ask_dataset.ipynb.

# %% auto 0
__all__ = ['CSVDataReader', 'OpenAIChatClient']

# %% ../nbs/ask_dataset.ipynb 3
import openai
import pandas as pd

# CSVDataReader class modified for Streamlit
class CSVDataReader:
    """
    This class handles reading and processing one or more CSV data files using Streamlit's file uploader.
    """
    def read_data(self, uploaded_files):
        """
        Reads and concatenates multiple uploaded CSV files into a single DataFrame.
        Args:
            uploaded_files: List of uploaded files.
        Returns:
            str: String representation of the concatenated CSV data.
        """
        dataframes = [pd.read_csv(file) for file in uploaded_files]
        concatenated_df = pd.concat(dataframes, ignore_index=True)
        return concatenated_df.to_string(index=False)
    
# OpenAIChatClient class
class OpenAIChatClient:
    """
    This class encapsulates the interaction with OpenAI's Chat API.
    """
    def __init__(self, api_key):
        """
        Initializes the OpenAI client with the provided API key.
        Args:
            api_key (str): The OpenAI API key.
        """
        openai.api_key = api_key
        self.client = openai.ChatCompletion()

    def query_gpt(self, csv_data, user_question):
        """
        Sends a query to the OpenAI API and gets a response.
        Args:
            csv_data (str): The CSV data in string format.
            user_question (str): The user's question about the data.
        Returns:
            str: The response from the OpenAI API.
        """
        system_message = ("You are a highly capable assistant skilled in data analysis. "
                          "You can interpret CSV data, perform calculations, summarize information, "
                          "answer specific queries, and even create visual representations if needed. "
                          "Here is the data you need to work with:\n" + csv_data)
        api_response = self.client.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": user_question}
            ])
        return api_response.choices[0].message['content']
